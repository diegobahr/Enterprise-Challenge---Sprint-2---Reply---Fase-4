#!/usr/bin/env python3
"""
SCRIPT PYTHON PARA TRABALHO DA FACULDADE
Sistema de Monitoramento Industrial - Hermes Reply Challenge

COMO USAR:
1. Copie os dados do Monitor Serial do Wokwi
2. Cole na vari√°vel 'dados_csv' abaixo (linha 25)
3. Execute o script
4. Os gr√°ficos ser√£o salvos automaticamente

Autores: [Seus nomes aqui]
Data: [Data atual]
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# Configura√ß√µes para gr√°ficos bonitos
plt.style.use('default')
sns.set_palette("husl")
plt.rcParams['figure.figsize'] = (12, 8)
plt.rcParams['font.size'] = 10

# ===============================================
# üìã COLE SEUS DADOS AQUI (do Monitor Serial)
# ===============================================

dados_csv = """Timestamp,Temperatura,Umidade,Luminosidade,Vibracao,Status
2000,23.4,45.2,1024,856,NORMAL
4000,24.1,44.8,1156,1024,NORMAL
6000,25.2,43.1,1089,1456,NORMAL
8000,26.8,42.5,1234,1789,NORMAL
10000,28.5,41.8,1345,2123,ATENCAO
12000,31.2,40.1,1456,3456,ALERTA
14000,29.8,41.2,1234,2890,ATENCAO
16000,27.3,42.8,1123,1567,NORMAL
18000,25.9,43.5,1089,1234,NORMAL
20000,24.6,44.1,1156,987,NORMAL
22000,23.8,45.0,1200,1100,NORMAL
24000,32.1,39.5,1300,3200,ALERTA
26000,30.5,40.8,1250,2800,ATENCAO
28000,28.2,42.1,1180,1900,NORMAL
30000,26.4,43.7,1150,1400,NORMAL"""

# ===============================================
# üîß PROCESSAMENTO DOS DADOS
# ===============================================

def processar_dados():
    """Processar dados CSV e preparar para an√°lise"""
    
    # Converter string CSV em DataFrame
    from io import StringIO
    df = pd.read_csv(StringIO(dados_csv))
    
    # Converter timestamp para segundos
    df['Tempo_seg'] = df['Timestamp'] / 1000
    
    # Converter timestamp para minutos (mais f√°cil de ler)
    df['Tempo_min'] = df['Tempo_seg'] / 60
    
    print("‚úÖ Dados processados com sucesso!")
    print(f"üìä Total de leituras: {len(df)}")
    print(f"‚è±Ô∏è  Per√≠odo monitorado: {df['Tempo_min'].max():.1f} minutos")
    
    return df

# ===============================================
# üìà GR√ÅFICO 1: S√âRIE TEMPORAL DA TEMPERATURA
# ===============================================

def grafico_temperatura(df):
    """Gr√°fico de linha mostrando evolu√ß√£o da temperatura"""
    
    plt.figure(figsize=(12, 6))
    
    # Plotar linha principal
    plt.plot(df['Tempo_min'], df['Temperatura'], 
             linewidth=2, marker='o', markersize=4, 
             color='#FF6B6B', label='Temperatura')
    
    # Linhas de refer√™ncia para alertas
    plt.axhline(y=29, color='orange', linestyle='--', alpha=0.7, 
                label='Aten√ß√£o (29¬∞C)')
    plt.axhline(y=32, color='red', linestyle='--', alpha=0.7, 
                label='Alerta (32¬∞C)')
    
    # Destacar pontos de alerta
    alertas = df[df['Status'] == 'ALERTA']
    if len(alertas) > 0:
        plt.scatter(alertas['Tempo_min'], alertas['Temperatura'], 
                   color='red', s=100, zorder=5, label='Pontos de Alerta')
    
    # Configura√ß√µes do gr√°fico
    plt.title('üìä Monitoramento de Temperatura Industrial\nSistema Hermes Reply', 
              fontsize=14, fontweight='bold', pad=20)
    plt.xlabel('Tempo (minutos)', fontsize=12)
    plt.ylabel('Temperatura (¬∞C)', fontsize=12)
    plt.legend(fontsize=10)
    plt.grid(True, alpha=0.3)
    
    # Adicionar anota√ß√µes nos picos
    temp_max = df.loc[df['Temperatura'].idxmax()]
    plt.annotate(f'Pico: {temp_max["Temperatura"]:.1f}¬∞C', 
                xy=(temp_max['Tempo_min'], temp_max['Temperatura']),
                xytext=(10, 10), textcoords='offset points',
                bbox=dict(boxstyle='round,pad=0.3', facecolor='yellow', alpha=0.7),
                arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0'))
    
    plt.tight_layout()
    plt.savefig('1_temperatura_temporal.png', dpi=300, bbox_inches='tight')
    print("‚úÖ Gr√°fico 1 salvo: 1_temperatura_temporal.png")
    plt.show()

# ===============================================
# üìà GR√ÅFICO 2: CORRELA√á√ÉO TEMPERATURA vs VIBRA√á√ÉO
# ===============================================

def grafico_correlacao(df):
    """Gr√°fico de dispers√£o mostrando correla√ß√£o"""
    
    plt.figure(figsize=(10, 8))
    
    # Cores por status
    cores = {'NORMAL': '#2ECC71', 'ATENCAO': '#F39C12', 'ALERTA': '#E74C3C'}
    
    for status in df['Status'].unique():
        dados_status = df[df['Status'] == status]
        plt.scatter(dados_status['Temperatura'], dados_status['Vibracao'],
                   c=cores[status], label=status, alpha=0.7, s=60)
    
    # Linha de tend√™ncia
    z = np.polyfit(df['Temperatura'], df['Vibracao'], 1)
    p = np.poly1d(z)
    plt.plot(df['Temperatura'], p(df['Temperatura']), 
             "r--", alpha=0.8, linewidth=2, label='Tend√™ncia')
    
    # Calcular correla√ß√£o
    correlacao = df['Temperatura'].corr(df['Vibracao'])
    
    plt.title(f'üìä Correla√ß√£o: Temperatura vs Vibra√ß√£o\nCorrela√ß√£o: {correlacao:.3f}', 
              fontsize=14, fontweight='bold', pad=20)
    plt.xlabel('Temperatura (¬∞C)', fontsize=12)
    plt.ylabel('Vibra√ß√£o (unidades)', fontsize=12)
    plt.legend(fontsize=10)
    plt.grid(True, alpha=0.3)
    
    # Adicionar texto com correla√ß√£o
    plt.text(0.05, 0.95, f'Correla√ß√£o de Pearson: {correlacao:.3f}', 
             transform=plt.gca().transAxes, fontsize=11,
             bbox=dict(boxstyle='round', facecolor='lightblue', alpha=0.8))
    
    plt.tight_layout()
    plt.savefig('2_correlacao_temp_vibracao.png', dpi=300, bbox_inches='tight')
    print("‚úÖ Gr√°fico 2 salvo: 2_correlacao_temp_vibracao.png")
    plt.show()

# ===============================================
# üìà GR√ÅFICO 3: DISTRIBUI√á√ÉO DOS STATUS
# ===============================================

def grafico_status(df):
    """Gr√°fico de barras mostrando distribui√ß√£o dos status"""
    
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))
    
    # Gr√°fico de barras
    status_counts = df['Status'].value_counts()
    cores_status = ['#2ECC71', '#F39C12', '#E74C3C']
    
    bars = ax1.bar(status_counts.index, status_counts.values, 
                   color=cores_status[:len(status_counts)])
    
    # Adicionar valores nas barras
    for bar in bars:
        height = bar.get_height()
        ax1.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                f'{int(height)}', ha='center', va='bottom', fontweight='bold')
    
    ax1.set_title('üìä Distribui√ß√£o dos Status do Sistema', fontweight='bold')
    ax1.set_ylabel('Quantidade de Leituras')
    ax1.grid(True, alpha=0.3)
    
    # Gr√°fico de pizza
    ax2.pie(status_counts.values, labels=status_counts.index, autopct='%1.1f%%',
            colors=cores_status[:len(status_counts)], startangle=90)
    ax2.set_title('üìä Percentual dos Status', fontweight='bold')
    
    plt.tight_layout()
    plt.savefig('3_distribuicao_status.png', dpi=300, bbox_inches='tight')
    print("‚úÖ Gr√°fico 3 salvo: 3_distribuicao_status.png")
    plt.show()

# ===============================================
# üìà GR√ÅFICO 4: DASHBOARD COMPLETO
# ===============================================

def dashboard_completo(df):
    """Dashboard com todos os sensores"""
    
    fig, axes = plt.subplots(2, 2, figsize=(16, 10))
    fig.suptitle('üè≠ Dashboard Sistema de Monitoramento Industrial\nHermes Reply Challenge', 
                 fontsize=16, fontweight='bold')
    
    # 1. Temperatura
    axes[0,0].plot(df['Tempo_min'], df['Temperatura'], 'r-o', markersize=3)
    axes[0,0].axhline(y=32, color='red', linestyle='--', alpha=0.7)
    axes[0,0].set_title('üå°Ô∏è Temperatura')
    axes[0,0].set_ylabel('¬∞C')
    axes[0,0].grid(True, alpha=0.3)
    
    # 2. Umidade
    axes[0,1].plot(df['Tempo_min'], df['Umidade'], 'b-s', markersize=3)
    axes[0,1].set_title('üíß Umidade')
    axes[0,1].set_ylabel('%')
    axes[0,1].grid(True, alpha=0.3)
    
    # 3. Luminosidade
    axes[1,0].plot(df['Tempo_min'], df['Luminosidade'], 'y-^', markersize=3)
    axes[1,0].set_title('üí° Luminosidade')
    axes[1,0].set_xlabel('Tempo (min)')
    axes[1,0].set_ylabel('Unidades')
    axes[1,0].grid(True, alpha=0.3)
    
    # 4. Vibra√ß√£o
    axes[1,1].plot(df['Tempo_min'], df['Vibracao'], 'g-d', markersize=3)
    axes[1,1].axhline(y=3200, color='red', linestyle='--', alpha=0.7)
    axes[1,1].set_title('üì≥ Vibra√ß√£o')
    axes[1,1].set_xlabel('Tempo (min)')
    axes[1,1].set_ylabel('Unidades')
    axes[1,1].grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('4_dashboard_completo.png', dpi=300, bbox_inches='tight')
    print("‚úÖ Gr√°fico 4 salvo: 4_dashboard_completo.png")
    plt.show()

# ===============================================
# üìà GR√ÅFICO 5: AN√ÅLISE DE ALERTAS
# ===============================================

def grafico_alertas(df):
    """Gr√°fico mostrando quando ocorreram os alertas"""
    
    plt.figure(figsize=(14, 8))
    
    # Criar subplot com dois eixos Y
    fig, ax1 = plt.subplots(figsize=(14, 8))
    ax2 = ax1.twinx()
    
    # Temperatura no eixo principal
    line1 = ax1.plot(df['Tempo_min'], df['Temperatura'], 
                     'r-o', linewidth=2, markersize=4, label='Temperatura')
    ax1.set_ylabel('Temperatura (¬∞C)', color='red', fontsize=12)
    ax1.tick_params(axis='y', labelcolor='red')
    
    # Vibra√ß√£o no eixo secund√°rio
    line2 = ax2.plot(df['Tempo_min'], df['Vibracao'], 
                     'b-s', linewidth=2, markersize=4, label='Vibra√ß√£o')
    ax2.set_ylabel('Vibra√ß√£o (unidades)', color='blue', fontsize=12)
    ax2.tick_params(axis='y', labelcolor='blue')
    
    # Destacar momentos de alerta
    alertas = df[df['Status'] == 'ALERTA']
    for _, alerta in alertas.iterrows():
        ax1.axvline(x=alerta['Tempo_min'], color='red', alpha=0.3, linewidth=8)
        ax1.text(alerta['Tempo_min'], alerta['Temperatura'] + 1, 'ALERTA!', 
                rotation=90, ha='center', va='bottom', fontweight='bold', color='red')
    
    ax1.set_xlabel('Tempo (minutos)', fontsize=12)
    ax1.set_title('üö® An√°lise Temporal de Alertas do Sistema\nMomentos Cr√≠ticos Destacados', 
                  fontsize=14, fontweight='bold', pad=20)
    
    # Legenda combinada
    lines1, labels1 = ax1.get_legend_handles_labels()
    lines2, labels2 = ax2.get_legend_handles_labels()
    ax1.legend(lines1 + lines2, labels1 + labels2, loc='upper left')
    
    ax1.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('5_analise_alertas.png', dpi=300, bbox_inches='tight')
    print("‚úÖ Gr√°fico 5 salvo: 5_analise_alertas.png")
    plt.show()

# ===============================================
# üìä RELAT√ìRIO DE ESTAT√çSTICAS
# ===============================================

def gerar_relatorio(df):
    """Gerar relat√≥rio com estat√≠sticas"""
    
    print("\n" + "="*60)
    print("üìã RELAT√ìRIO ESTAT√çSTICO - SISTEMA HERMES REPLY")
    print("="*60)
    
    print(f"\nüìä RESUMO GERAL:")
    print(f"   ‚Ä¢ Total de leituras: {len(df)}")
    print(f"   ‚Ä¢ Per√≠odo monitorado: {df['Tempo_min'].max():.1f} minutos")
    print(f"   ‚Ä¢ Intervalo entre leituras: {df['Tempo_seg'].diff().mean():.1f} segundos")
    
    print(f"\nüå°Ô∏è  TEMPERATURA:")
    print(f"   ‚Ä¢ M√©dia: {df['Temperatura'].mean():.1f}¬∞C")
    print(f"   ‚Ä¢ M√≠nima: {df['Temperatura'].min():.1f}¬∞C")
    print(f"   ‚Ä¢ M√°xima: {df['Temperatura'].max():.1f}¬∞C")
    print(f"   ‚Ä¢ Desvio padr√£o: {df['Temperatura'].std():.1f}¬∞C")
    
    print(f"\nüì≥ VIBRA√á√ÉO:")
    print(f"   ‚Ä¢ M√©dia: {df['Vibracao'].mean():.0f} unidades")
    print(f"   ‚Ä¢ M√≠nima: {df['Vibracao'].min():.0f} unidades")
    print(f"   ‚Ä¢ M√°xima: {df['Vibracao'].max():.0f} unidades")
    
    print(f"\nüö® ALERTAS:")
    status_counts = df['Status'].value_counts()
    for status in ['NORMAL', 'ATENCAO', 'ALERTA']:
        if status in status_counts:
            pct = (status_counts[status] / len(df)) * 100
            print(f"   ‚Ä¢ {status}: {status_counts[status]} ({pct:.1f}%)")
    
    print(f"\nüîó CORRELA√á√ïES:")
    print(f"   ‚Ä¢ Temperatura vs Vibra√ß√£o: {df['Temperatura'].corr(df['Vibracao']):.3f}")
    print(f"   ‚Ä¢ Temperatura vs Umidade: {df['Temperatura'].corr(df['Umidade']):.3f}")
    
    # Salvar relat√≥rio em arquivo
    with open('relatorio_estatisticas.txt', 'w', encoding='utf-8') as f:
        f.write("RELAT√ìRIO ESTAT√çSTICO - SISTEMA HERMES REPLY\n")
        f.write("="*50 + "\n\n")
        f.write(f"Total de leituras: {len(df)}\n")
        f.write(f"Per√≠odo: {df['Tempo_min'].max():.1f} minutos\n")
        f.write(f"Temperatura m√©dia: {df['Temperatura'].mean():.1f}¬∞C\n")
        f.write(f"Temperatura m√°xima: {df['Temperatura'].max():.1f}¬∞C\n")
        f.write(f"Alertas: {status_counts.get('ALERTA', 0)}\n")
        f.write(f"Correla√ß√£o Temp-Vibra√ß√£o: {df['Temperatura'].corr(df['Vibracao']):.3f}\n")
    
    print(f"\n‚úÖ Relat√≥rio salvo em: relatorio_estatisticas.txt")

# ===============================================
# üöÄ FUN√á√ÉO PRINCIPAL
# ===============================================

def main():
    """Fun√ß√£o principal - executa toda a an√°lise"""
    
    print("üöÄ INICIANDO AN√ÅLISE DOS DADOS...")
    print("Hermes Reply Challenge - Sistema de Monitoramento Industrial")
    print("="*60)
    
    # Processar dados
    df = processar_dados()
    
    # Gerar todos os gr√°ficos
    print("\nüìà Gerando gr√°ficos...")
    grafico_temperatura(df)
    grafico_correlacao(df)
    grafico_status(df)
    dashboard_completo(df)
    grafico_alertas(df)
    
    # Gerar relat√≥rio
    gerar_relatorio(df)
    
    print("\nüéâ AN√ÅLISE COMPLETA!")
    print("Arquivos gerados:")
    print("   ‚Ä¢ 1_temperatura_temporal.png")
    print("   ‚Ä¢ 2_correlacao_temp_vibracao.png") 
    print("   ‚Ä¢ 3_distribuicao_status.png")
    print("   ‚Ä¢ 4_dashboard_completo.png")
    print("   ‚Ä¢ 5_analise_alertas.png")
    print("   ‚Ä¢ relatorio_estatisticas.txt")
    print("\n‚úÖ Pronto para entregar o trabalho!")

# ===============================================
# üéØ EXECUTAR SCRIPT
# ===============================================

if __name__ == "__main__":
    main()
